# Gitによるバージョン管理

## バージョン管理

データ分析で用いるソースコードやデータは日々更新（バージョンアップ）されていきます。
ある日の作業では、データ読み込みのプログラムを書いて、次の日にはデータの前処理と可視化のプログラムを書くという流れです。
またある日には、これまで使っていたデータを新しいデータに差し替えることもあるでしょう。
そんな中で、ある日突然、以前実行可能だったコードがエラーを吐いたり、以前正常に動作していたコードが動かなくなったりすることがあります。



バグとなるプログラムを書いてしまうことは誰にでもあることですが、そのような場合に、以前のバージョンに戻ることができると便利です。

同じファイルに対して、複数のバージョンを保存しておくことがバージョン管理の目的です。

現在バグを起こしているバージョンから遡り、以前のバージョンに戻します。すると、バグが発生する前の状態に戻ることができます。

間違いに気がついたり

一人で使う場合にも利点はあります。

作業の記録

バージョン管理で期待されること

- バックアップ
- 実験的な操作
- 共同作業とレビュー
- 履歴

## バージョン管理システム: Git

バージョン管理システムには大別して2つの種類があります。

分散型

複数の開発者が共同でコードを管理・開発する際に便利な機能を提供するバージョン管理システムです。

バージョン管理システムを導入しないプロジェクトでは、ファイルが煩雑になりがちです。

どのファイルが最新のものなのか、どのデータを使うのかがわからなくなることもあります。



ここではGitのインストール方法や詳細なGitの説明は行いません。@isbn9784295013617 や @isbn9784065352199 を参考にしてください。オンラインで読める[Pro Git](https://git-scm.com/book/ja/v2)もあります。

### バージョン管理の流れ

1. リポジトリの作成
2. ファイルの追加
3. ファイルのコミット
4. ファイルのプッシュ

Gitには100を超えるコマンドがありますが、覚えるべきコマンドは限定的です。
上記のバージョン管理の流れでは、それぞれ数個のコマンドを使います。
つまり、一連のバージョン管理で用いるコマンドは指で数えられる範囲に収まります。

#### リポジトリの作成

`git init`

`.git`フォルダが作成されます。

このフォルダはGitのリポジトリとしての役割を果たします。隠しフォルダとなっており、ユーザーが直接操作することはありません。

#### ファイルの追加

`git add`

`git status`

#### ファイルのコミット

作成・変更したファイルの状態を記録する作業をGitでは「コミット」と呼びます。
コミットを重ねることで、ファイルの変更履歴を残すことができ、必要に応じて過去の状態に遡ることができます。

`git commit`

:::{.callout-note}
最低限のGit設定

氏名とメールアドレスを設定します。

ターミナルを開いて以下のコマンドを実行します。
二重引用符で示した箇所は適宜変更してください。

`git config --global user.name "<あなたの名前>"`
`git config --global user.email "<あなたのメールアドレス>"`

2つの設定は、Gitのコミットログで誰がコミットしたかを示すために必要な情報です。

:::

コミットには、コミットメッセージと呼ばれる説明文を付けることができます。
作業後、コミットの履歴を見た際に、どのような変更を行ったかを把握するために重要な情報となります。
なぜその変更を行ったのか、どのような変更を行ったのかを記述します。

- 1行目: 変更内容の要約
- 2行目: 空行
- 3行目以降: 変更内容の詳細

Gitに不慣れな方は、コミットメッセージを書くことに障壁を感じるかもしれません。
ここで大事なことはコミットに残すことです。コミットメッセージは後から修正することもできます。
簡単な情報であっても、コミットメッセージを残すことが大切です。


#### ファイルのプッシュ

`git push`

`git log`

### 状態を戻す

バージョン管理システムを使うと、過去の状態に戻すことができます。

ファイルを復元

コミット後の状態に戻すには、`git checkout`コマンドを使います。

## RStudioでのバージョン管理

プロジェクト内には複数のファイルが存在します。

ターミナルあるいはGitパネルを使ってバージョン管理を行います。

RStudioではGitとSVNによるバージョン管理をサポートしています。

ターミナルでのコマンド操作が苦手な方は、RStudioのGitパネルを使うと便利です。

- `N`
- `M`
- `?`

## VSCodeでのバージョン管理

- リポジトリを初期化する

<!-- ブランチについては簡単に紹介するだけ -->

## GitHub

GitHub (https://github.com/) は、Gitリポジトリをホスティングするウェブサービス（リモートリポジトリ）です。
利用の際にはアカウントの作成が必要です。

プライベートリポジトリ

リポジトリのURLは `https://github.com/<アカウント名>/<リポジトリ名>` となります。

CRANで配布されるRパッケージのソースコードも多く管理されます。

RパッケージのソースコードをGitHubで管理する開発者も多く、CRANで配布されるものだけでなく、CRANポリシーに適合しないなどの理由でCRANでは配布されないパッケージも豊富に存在します。
remotesやpakパッケージを使えば、これらのGitHub上で配布されるRパッケージのインストールも可能です。

Gitのコミットログが増えてくる

プロジェクトを一人で進める場合でも、複数台のコンピュータで作業を行う際に

GitHub上のリモートリポジトリを介して、複数のコンピュータでファイルを共有できます。

バックアップとして機能します。

GitHubにはここで取り上げる内容以外にも多くの機能があります。GitHub公式が提供する[GitHub Skills](https://skills.github.com/)では、実際のGitHubリポジトリを操作してGitHubの使い方を学ぶことができます。

### ローカルリポジトリの紐付け

[プロジェクトの章](project.qmd)で作成したプロジェクト（`rrr-demo`）をGitHubと紐付けます。

![GitHubでの新規リポジトリの作成](https://i.gyazo.com/ce7d7d5c7d4bcd6d4530cc520ecc54bf.jpg)

![](https://i.gyazo.com/3286bed6e6384c3bd99dc839ff6d54b3.jpg)

```bash
git remote add origin https://github.com/uribo/rrr-demo.git
git branch -M main
git push -u origin main
```

### リモートリポジトリのクローン

新しいコンピュータなど、ローカルリポジトリを持っていない場合には、リモートリポジトリをクローンします。

`git clone`

![](https://i.gyazo.com/4e78331047b8452eaaeaac54493f954d.jpg)

```bash
git clone https://github.com/uribo/rrr-demo.git ~/Documents/projects2024/rrr-demo
```

変更の同期 `git pull`, `git fetch`

クローンしたリポジトリはローカルリポジトリとして扱うことができます。

### GitHub Issues

プロジェクトに関する問題やメモのために利用できます。

## .gitignore

Gitバージョン管理を行うリポジトリでは、バージョン管理に含めたくないファイルやディレクトリが存在する場合があります。
ユーザーのアカウント情報を記録したファイルなどのクレデンシャルなデータです。
このほか、巨大なバイナリファイルやキャッシュファイルなども含まれます。

`.gitignore`を使って、これらのファイルをバージョン管理から除外することができます。

`.gitignore`ファイルは、リポジトリのルートディレクトリに配置します。

`.gitignore`ファイルには、除外するファイルやディレクトリのパターンを記述します。


