# バージョン管理

## バージョン管理の必要性

データ分析で用いるソースコードやデータは日々更新（バージョンアップ）されていきます。
ある日の作業では、データ読み込みのプログラムを書いて、次の日にはデータの前処理と可視化のプログラムを書くという流れです。
またある日には、これまで使っていたデータを新しいデータに差し替えることもあるでしょう。
そんな中で、ある日突然、以前実行可能だったコードがエラーを吐いたり、以前正常に動作していたコードが動かなくなったりすることがあります。



バグとなるプログラムを書いてしまうことは誰にでもあることですが、そのような場合に、以前のバージョンに戻ることができると便利です。

同じファイルに対して、複数のバージョンを保存しておくことがバージョン管理の目的です。

現在バグを起こしているバージョンから遡り、以前のバージョンに戻します。すると、バグが発生する前の状態に戻ることができます。

間違いに気がついたり

一人で使う場合にも利点はあります。

作業の記録

バージョン管理で期待されること

- バックアップ
- 実験的な操作
- 共同作業とレビュー
- 履歴

## バージョン管理システム: Git

バージョン管理システムには大別して2つの種類があります。

分散型

複数の開発者が共同でコードを管理・開発する際に便利な機能を提供するバージョン管理システムです。

バージョン管理システムを導入しないプロジェクトでは、ファイルが煩雑になりがちです。

どのファイルが最新のものなのか、どのデータを使うのかがわからなくなることもあります。



ここではGitのインストール方法や詳細なGitの説明は行いません。@isbn9784295013617 や @isbn9784065352199 を参考にしてください。オンラインで読める[Pro Git](https://git-scm.com/book/ja/v2)もあります。

### リポジトリ

Gitではファイルやディレクトリの状態を記録し、変更履歴を管理する場所をリポジトリと呼びます。
リポジトリには、プロジェクトに関連するコードやファイルが含まれます。

リポジトリは、性質の違いによりローカルリポジトリとリモートリポジトリに分けられます。
ローカルリポジトリは、自分のコンピュータ上に保存されているリポジトリです。
個々の開発者が自身の作業を管理し、変更履歴を保存するために使用されます。

リモートリポジトリは、ネットワーク上のサーバーに保存されているリポジトリです。
ネットワークを介して、複数の開発者がアクセス可能であり、共同作業（共有と同期）を行うために使用されます。

Gitリポジトリを使った開発の流れは、開発者個人がそれぞれのローカルリポジトリで作業を行い、リモートリポジトリに変更を反映するというものです。
そのため、リモートリポジトリはバックアップとしての役割も果たします。

## バージョン管理の流れ

最低限必要なコマンドを紹介しますので、まずはバージョン管理の雰囲気をつかんでください。
Gitバージョン管理は次の3つのステップで行います。

1. リポジトリの作成
2. ファイルの追加
3. ファイルのコミット

Gitには100を超えるコマンドがありますが、覚えるべきコマンドは限定的です。
上記のバージョン管理の流れでは、それぞれ数個のコマンドを使います。
つまり、一連のバージョン管理で用いるコマンドは指で数えられる範囲に収まります。

最初の作業は一度行えば、その後は実行する必要がなくなるので、実際は2つのステップとなります。

### リポジトリの作成

これからプロジェクトを立ち上げる、あるいは既存のプロジェクトをGitで管理する場合、まずリポジトリを作成します。
`git init`コマンドを実行すると、現在のディレクトリに`.git`フォルダが作成されます。
このフォルダはGitリポジトリの中心的な役割を果たします。隠しフォルダとなっており、ユーザーが直接操作することはありません。

### ファイルの追加: ステージングエリアへの登録

リポジトリにバージョン管理の対象とするファイルを追加するには、`git add`コマンドを使います。
リポジトリにファイルがない場合、何かファイルを作成してみてください。
その後、`git status`というコマンドを実行すると `Untracked files` という箇所に作成したファイル名が表示されます。
この状態のファイルをリポジトリに追加するには、`git add`コマンドを使います。

```
`git add <ファイル名>`
```

`git add`したファイルは、ステージングエリアという仮想的な場所に追加されます。
ステージングエリアに追加されたファイルは、次にコミットする対象となります。

Untracked状態のファイルが複数ある場合、`git add .`というコマンドを使うと、全てのファイルを一括で追加できます。


### ファイルのコミット

作成・変更したファイルの状態を記録する作業をGitでは「コミット」と呼びます。
コミットを重ねることで、ファイルの変更履歴を残すことができ、必要に応じて過去の状態に遡ることができます。

コミットの対象となるのは、ステージングエリアに追加されたファイルです。
そのため`git add`を行う前に`git commit`を行うと、コミット対象のファイルがないというエラーが表示されるので注意してください。

`git commit`コマンドを使って、ファイルの変更をコミットします。
コミットには、コミットメッセージと呼ばれる説明文を付けることができます。
作業後、コミットの履歴を見た際に、どのような変更を行ったかを把握するために重要な情報となります。
なぜその変更を行ったのか、どのような変更を行ったのかを記述します。

:::{.callout-note}
## 最低限のGit設定

コミットを行う際には、氏名とメールアドレスの設定が必要となります。
2つの設定は、Gitのコミットログで誰がコミットしたかを示すために必要な情報です。

ターミナルを開いて以下のコマンドを実行します。
二重引用符で示した箇所は適宜変更してください。

```
`git config --global user.name "<あなたの名前>"`
`git config --global user.email "<あなたのメールアドレス>"`
```

設定が完了したかどうかは、以下のコマンドで確認できます。

```
`git config --list`
```

この出力で`user.name`と`user.email`が正しく表示されていれば、設定が完了しています。
:::

コミットメッセージは、以下のような形式で記述します。

- 1行目: 変更内容の要約
- 2行目: 空行
- 3行目以降: 変更内容の詳細

Gitに不慣れな方は、コミットメッセージを書くことに障壁を感じるかもしれません。
しかし、難しく考える必要はありません。
ここで大事なことはコミットを残すことです。コミットメッセージは後から修正することもできますし、正解があるわけではありません。
簡単な情報であっても、コミットメッセージを残すことが大切です。

## アプリケーションを利用したバージョン管理

Gitはコマンドラインツールですが、GUIアプリケーションを使うことで、より簡単にバージョン管理を行うことができます。
Rの統合開発環境であるRStudioやVSCodeでも、Gitと連携した操作が可能です。
分析作業から離れずにバージョン管理を行うことができるため、非常に便利です。
すべてのコマンドを実行可能なわけではありませんが、基本的な操作はGUIを通して行えます。

### RStudio

ターミナルあるいはGitパネルを使ってバージョン管理を行います。
ここではGUIで操作可能な方法を紹介します。
なおRStudioのGUIでは、GitとSVNによるバージョン管理をサポートしています。

`.git`フォルダが存在するプロジェクトを開くと、RStudioはGitパネルを表示します。
この画面がRStudioでのGUIによるバージョン管理処理の中心となります。
もしもGitパネルが見つからない場合、メニューのTools、Global Options...から、Git/SVNにて`Enable version control interface for RStudio projects`にチェックを入れてください。

Gitパネルには、ファイルの差分やコミット履歴を確認するボタンが用意されています。
メインとなるのは`Staged`、`Status`、`Path`の3列で構成される箇所です。
それぞれの列には次の意味があります。

- `Staged`: ステージングエリアに追加されたファイル
- `Status`: ファイルの状態
- `Path`: ファイルのパス

`Staged`はチェックボックスになっており、ステージングエリアに追加するファイルを選択できるようになっています。
これにより、`git add`コマンドを使わずにステージングエリアへの登録が行えます。
Shiftキーを押しながらの選択で、複数ファイルの選択も可能です。

次の`Status`には、いくつかのアイコンが表示されます。
各アイコンの意味は下記の通りです。

| アイコン                                                                                                                      | 色  | 状態                                   |
|-------------------------------------------------------------------------------------------------------------------------------|-----|:---------------------------------------|
| **?** ![git-unknown.png](https://qiita-image-store.s3.amazonaws.com/0/19462/6701f0b2-8008-08b5-fd1b-4f52e9cf8092.png)         | 黄  | untracked バージョン管理の対象になっていない  |
| **M**odified ![git-modified.png](https://qiita-image-store.s3.amazonaws.com/0/19462/003a537c-a381-b341-5657-eec3fe5039ab.png) | 青  | リポジトリの状態から変更された         |
| **D**elete ![git-deleted.png](https://qiita-image-store.s3.amazonaws.com/0/19462/95e26e47-1f6e-f383-9a23-781feb9124d9.png)    | 赤  | リポジトリにあったファイルが削除された |
| **A**dded ![git-added.png](https://qiita-image-store.s3.amazonaws.com/0/19462/45aed923-c813-657f-b9c9-c9a5f919ffde.png)       | 緑  | 新たにバージョン管理状態になった              |
| **U**nmerged ![git-commit-conflict.png](https://qiita-image-store.s3.amazonaws.com/0/19462/18f55d6e-704a-803b-4e96-776a00a13da0.png)       | 橙  | リポジトリ間で差分が衝突している       |
| **R**enamed | 紫 | ファイル名が変更された |



### VSCode

- リポジトリを初期化する

<!-- ブランチについては簡単に紹介するだけ -->

## GitHub

GitHub (https://github.com/) は、Gitリポジトリをホスティングするウェブサービス（リモートリポジトリ）です。
世界中のさまざまなプロジェクトで採用されるリモートリポジトリであり、オープンソースプロジェクトの共有やコラボレーションに広く利用されています。
ウェブサイトの閲覧は誰でもできますが、主要な機能を利用する際にはアカウントの作成が必要です。

GitHub上のリポジトリには、誰でもアクセス可能なパブリックリポジトリと、特定のユーザーのみがアクセス可能なプライベートリポジトリの2種類があります。
プライベートリポジトリは



リポジトリのURLは `https://github.com/<アカウント名>/<リポジトリ名>` となります。

CRANで配布されるRパッケージのソースコードも多く管理されます。

RパッケージのソースコードをGitHubで管理する開発者も多く、CRANで配布されるものだけでなく、CRANポリシーに適合しないなどの理由でCRANでは配布されないパッケージも豊富に存在します。
remotesやpakパッケージを使えば、これらのGitHub上で配布されるRパッケージのインストールも可能です。

Gitのコミットログが増えてくる

プロジェクトを一人で進める場合でも、複数台のコンピュータで作業を行う際に

GitHub上のリモートリポジトリを介して、複数のコンピュータでファイルを共有できます。

バックアップとして機能します。

GitHubにはここで取り上げる内容以外にも多くの機能があります。GitHub公式が提供する[GitHub Skills](https://skills.github.com/)では、実際のGitHubリポジトリを操作してGitHubの使い方を学ぶことができます。

### ローカルリポジトリの紐付け

[プロジェクトの章](project.qmd)で作成したプロジェクト（`rrr-demo`）をGitHubと紐付けます。


![GitHubでの新規リポジトリの作成](https://i.gyazo.com/ce7d7d5c7d4bcd6d4530cc520ecc54bf.jpg)

![](https://i.gyazo.com/3286bed6e6384c3bd99dc839ff6d54b3.jpg)

```bash
git remote add origin https://github.com/uribo/rrr-demo.git
git branch -M main
git push -u origin main
```

### リモートリポジトリのクローン

新しいコンピュータなど、ローカルリポジトリを持っていない場合には、リモートリポジトリをクローンします。

`git clone`

![](https://i.gyazo.com/4e78331047b8452eaaeaac54493f954d.jpg)

```bash
git clone https://github.com/uribo/rrr-demo.git ~/Documents/projects2024/rrr-demo
```

変更の同期 `git pull`, `git fetch`

クローンしたリポジトリはローカルリポジトリとして扱うことができます。

### GitHub Issues

プロジェクトに関する問題やメモのために利用できます。

## バージョン管理の流れ再び

コミット後のステップとして、以下が追加されます。

1. リモートリポジトリの指定
2. ファイルのプッシュ

### ファイルのプッシュ

コミットを行ったら、変更を確定させるためのプッシュを行います。
プッシュを行うことで、リモートリポジトリに変更内容が反映されます。

`git push`

## .gitignore

Gitバージョン管理を行うリポジトリでは、バージョン管理に含めるべきではないファイルが存在します。
例えば、セキュリティ上重要な情報を含むファイルやキャッシュファイルなどです。
これらがバージョン管理に含まれると、セキュリティリスクが高まったり、リポジトリのサイズが大きくなるなどの問題が発生します。
実際に、GitHubなどのリモートリポジトリにデータベースの接続情報やAPIキーなどの機密情報が含まれていると、悪意のある第三者によって悪用される可能性があります。

Gitでは`.gitignore`にバージョン管理の対象外とするファイルを記録することで、上記の問題の解決を図っています。
バージョン管理を行わないファイルの指定方法は、`gitignore`にそのファイル名や名称のパターンを記述することで行います。
`.gitignore`ファイルはリポジトリ内の任意の場所に配置することができますが、通常はリポジトリのルートディレクトリ、`.git/`フォルダと同じ階層に配置します。

`.gitignore`に記録するファイルはプロジェクトによって異なりますが、一般的にバージョン管理から除外される種類のファイルが存在します。
特にファイルやフォルダ名の先頭に `.` が付いているものは、バージョン管理から除外することが一般的です。
こうしたファイルやフォルダは隠しファイル、隠しフォルダと呼ばれ、システムによって生成され、ユーザーが直接操作することは限定的です。
加えて、サイズが大きかったり差分管理が困難なバイナリファイルはバージョン管理の対象外となることが多いです。

`.gitignore`の記載例を示します。`.gitignore`では特定の正規表現を使って複数のファイルを指定したり、否定の表現（つまり管理に含める）を使った柔軟な指定が可能です。

```
Thumbs.db
.DS_Store
.Rproj.user
.Rhistory
.RData
.Ruserdata
*.pdf
*.log
README.html
```

`Thumbs.db`や`.DS_Store`は目にしたことがない方もいるかもしれません。
これらはWindowsやmacOSで生成されるファイルで、フォルダ内のファイルのサムネイルや表示方法を記録するファイルです。
プロジェクト内のコードには影響を与えないため、バージョン管理は不要です。

続いての`.Rproj.user`から`.Ruserdata`はRに関連するものです。
特に`.Rproj.user`はRStudioのプロジェクト設定ファイルを含むフォルダでバージョン管理を行いません。
`.Rhistory`や`.RData`はRの履歴やデータを保存するファイルですが、ユーザーやセッションの度に更新されるものであるため、これらもバージョン管理を行いません。

`*.pdf`、`*.log`はPDFおよびlog形式のファイル一式を除外する指示です。ファイル名に関わらず、拡張子によって除外される複数のファイルを想定しています。
アスタリスク（`*`）は任意の文字列を表し、`*.pdf`は拡張子が`.pdf`であるファイルをすべて指定します。

拡張子による指定という点で、その次の行 `README.html` も同様ですが、`*.pdf`や`*.log`と異なるのはプロジェクト内のすべてのHTMLファイルを除外するわけではないという点です。
`README.html`は特定のファイル名を指定しています。つまり対象外となるのは1つのファイルだけです。

作成した覚えのないファイルやフォルダがGitバージョン管理の対象となっているときは、注意してそのファイルをバージョン管理に含めるべきかを検討してください。
著者の経験では、身に覚えのないファイルは一時的に生成されたものや成果物であることが多く、バージョン管理の対象外とすることが多いです。
