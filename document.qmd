# ドキュメントの作成

データ分析の成果物はレポートやプレゼンテーションでまとめることが多いです。
その際、プログラムのソースコードとともに結果に至るまでの過程を記録しておくことは成果物の透明性を高めるために重要です。
そこで大事なのがドキュメントの作成です。
ソースコードと結果、さらに結果に対する解説や処理内容を文章にまとめることで、他の人が成果物を理解しやすくなります。
ここでは、データ分析におけるドキュメントの作成方法について紹介します。

## 文芸的プログラミング

通常のコンピュータプログラミングでは、プログラムのソースコードと実行結果は別々に扱われます。
コードと結果の関連性が失われている状態です。

例えばRの場合、スクリプトファイルにコードを書いて実行すると、コンソールに結果が表示されます。
コンソールに表示された結果をコピーして、別のファイルに貼り付けることで、ソースコードと結果を一つのファイルにまとめることができますが、コピーをし忘れたり、間違って貼り付けたりすることがあります。
またこのような作業では、データや処理内容を変更する度に上書きの必要性が生じるので手間がかかります。

文芸的プログラミングは、ソースコードと結果を含めた関連するドキュメントを一つのファイルにまとめることで、コードと結果の関連性を保ちながらドキュメントを作成する方法です。
コードの変更に伴って出力結果も自動的に更新されるため、手作業でのコピー&ペースト作業が不要になります。
このように動的に生成されるドキュメントを作成するツールとして、[R Markdown](https://rmarkdown.rstudio.com/)や[Jupyter Notebook(Jupyter)](https://jupyter.org/)が有名です。

## Quarto

[Quarto](https://quarto.org/)はPositがオープンソースで開発している動的ドキュメント作成システムです。
Jupyterやプレーンテキストで書かれたファイルをもとに、HTMLやPDF、Wordなどのさまざまな形式でのドキュメントを作成することができます。
Rだけでなく、PythonやJuliaなどのプログラミング言語にも対応しています。

Rユーザにとっては、動的ドキュメントの作成にR Markdownを使うことが一般的ですが、QuartoはR Markdownの後継としても位置づけられています。
そのため、R Markdownの機能をほぼそのまま利用することができます。
実際、QuartoでのR言語の評価はR Markdown同様、knitrパッケージを介して行われます。

ここではQuartoの基本的な使い方として単一のドキュメント生成の手順を紹介します。
一方、Quartoにはウェブサイト、ブログ、書籍執筆をサポートする機能もあります。
これらのQuartoの詳細については[公式ドキュメント](https://quarto.org/docs/guide/)を参照してください。

R Markdownの基礎は @isbn9784297121709 にまとまっています。

### Quartoによるドキュメントの作成

Quartoでは、`.qmd`という拡張子のファイルを作成し、その中にコードと必要な文章を記述します。
`.qmd`ファイルをもとに任意の形式でのドキュメントを生成します。
`.qmd`ファイルの基本構成は以下の通りです。

- フロントマター... ドキュメントのメタデータ（タイトルや著者名、出力形式などの実行オプション等）を記述する部分。YAML形式で記述します。
- 文章... ドキュメントの本文。プレーンテキストに加えて、Markdown記法による文字装飾、LaTeX記法による数式記述が可能です。
- コードブロック（コードセル）[^1] ... 

![Quartoの基本構成要素](https://i.gyazo.com/2e47b271e91f0e6a175bbb91668519f6.png)

[^1]: コードを記述する箇所。Jupyterではコードセルと呼ばれます。

ファイルの先頭にYAMLの形式でメタデータを記述します。
以降はドキュメントの文章とコードとなります。

コードブロックの宣言は、R Markdown同様、バッククォート(\`)を使います。
コードブロックの宣言部分には `{}` の中に言語名を記述します。
Rの場合は`r`、Pythonでは`python`、Juliaでは`julia`となります。

コードブロックには、プログラムやその出力に関する挙動を制御する実行オプションを記述できます[^2]。
指定可能なオプションとして、`echo`（コードの表示有無）、`eval`（コードの評価有無）、図のサイズやキャプションなどがあります。

コードブロックの実行オプションは以下のように記述します。
コードブロックの上部に`#|`を記述し、その後にオプション名とパラメータを記述します。
論理値での指定が必要な実行オプションは`true`または`false`で指定します。
Rの論理値の指定はすべて大文字で行いますが、ここではすべて小文字で表記するので注意してください。

```{{r}}
#| eval: true
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| fig-cap: "グラフの描画"
library(ggplot2)

mtcars |> 
  ggplot(aes(x = wt, y = mpg)) +
  geom_point() +
  labs(title = "燃費と重量の関係")
```

[^2]: ドキュメント全体での制御はフロントマター内で行います。個別のコードブロックに対して記述したオプションが優先されます。実行オプションの詳細はQuarto公式ページの[ドキュメント](https://quarto.org/docs/computations/execution-options.html)に記載されています。

必要な文章とコードを記載したら、Quartoのコマンドを使ってドキュメントを生成します。
`.qmd`ファイルからのドキュメント生成の工程を、Quartoではレンダーと呼びます。
レンダーは`.qmd`ファイルだけでなく、Jupyterで使われる`.ipynb`ファイルからも行うことができます。

レンダーはコマンドラインを使って以下のように行います。

```bash
quarto render document.qmd --to html
```

このコマンドを実行すると`document.qmd`ファイルをもとにHTML形式のドキュメントを生成します。
出力形式をWordファイルに変更する場合は、`--to`オプションの引数を`docx`に変更するだけです。

```bash
quarto render document.qmd --to docx
```

RStudioやVS Codeなどのアプリケーションでは、Quartoのコマンドを実行するためのインターフェースが提供されています。
これにより、コマンドの入力の手間がなくなり、より直感的にQuartoを使うことができます。

### RStudioでのQuartoの利用

Quartoの機能を試すために、RStudioで新しい`.qmd`ファイルを作成してみましょう。
Quartoが利用可能な状況であれば、RStudioからQuartoを使うことができます。
メニューから「File」、「New File」、「Quarto Document...」の順に進むと以下のような画面が表示されます。

![RStudioでのqmdファイルの新規作成。Editorの箇所にチェックを入れるとビジュアルモードでの編集が可能となる（後述）](https://i.gyazo.com/d16522748784a3f6cf9dfa85b69f4e64.png)

タイトルや出力形式を指定して「Create」ボタンをクリックすると新しい`.qmd`ファイルが作成されます。
また、エンジンとしてKnitrかJupyterが選択可能です。Knitr、つまりRのエンジンであってもreticulateパッケージにより
Pythonの実行ができますが、Jupyterを指定することで直接Pythonの実行が可能になります。

ソースペインに新たに作成されたファイル内にコードと文章を記述して、レンダーを行います。
レンダーはソースペイン上の「Render」ボタンより実行します。ボタンをクリックすると、バックグラウンドで`quarto`のコマンドが実行され、`.qmd`ファイル中のソースコードの実行結果をもとに指定した形式のドキュメントが生成されます。

RStudioでは、`Ctrl`+`Alt`+`I`（macOSでは`Command`+`Option`+`I`）のショートカットキーを使うことで、コードブロックを追加できます。
このショートカットキーを使うと、コードブロックのエンジンとして`{r}`が自動的に挿入されます。

レンダーのとき、通常コードブロックの評価はコードの上部に記載されたものから行われますが、
その場での実行も可能です。
これはレンダーをする前に結果を確認するのに役立ちます。
対象のコードが書かれた行にカーソルを置いて`Ctrl`+`Enter`（macOSでは`Command`+`Enter`）を押すことで、そのコードを実行できます。
コードブロック全体のコードを実行するには、`Ctrl`+`Shift`+`Enter`（macOSでは`Command`+`Shift`+`Enter`）を使います。
あるいは、コードブロックの右上にある右向きの三角形ボタンをクリックすることでも実行できます。

<!-- ![RStudioでのqmdファイルのインタラクティブ操作](https://i.gyazo.com/5e9e349b78ccb1ef38e7a057d13d69d6.png) -->

![RStudioでのqmdファイルのインタラクティブ操作](https://i.gyazo.com/f7f0b1a95814db2e88254428fe370526.gif)

文字装飾、図や数式、参考文献等の挿入結果を表示しながら、ファイルを編集するときにはビジュアルモードの利用が便利です。
ビジュアルモードは、ソースペイン中にある編集中のqmdファイルのタブで「Visual」を選択すると切り替わります。
あるいはフロントマターで`editor: visual`を宣言しておくことで、ファイルを開いたときにビジュアルモードが自動的に適用されます。

### PositronでのQuartoの利用

PositronもRStudio同様に、qmdファイルのインタラクティブな編集と実行をサポートしています。
レンダーやビジュアルモードの切り替えも可能です。
RStudioと異なるのは、Positronではipynbファイルの編集・実行ができる点です。

![Positronでのqmdファイルの編集。コードブロック中のコード実行、レンダーボタンの配置はRStudioと同様。](https://i.gyazo.com/600dfab433d556972bce35312795db9e.png)

## PDFの出力

Quartoで日本語のPDFを生成する場合、2つの選択肢があります。
一つは出力形式を指定する際に`pdf`を指定する方法です。これはLaTeXを使ってPDFを生成する方法です。
もう一つの方法は`typst`を出力形式として指定する方法です。
まずは一般的なLaTeXによるPDF出力方法を見てみましょう。

### LaTeX

LaTeXを使ったPDF出力を行う場合、事前にLaTeXの環境を揃える必要があります。

QuartoのコマンドからもLaTeX環境を導入可能です。

```bash
quarto install tinytex
```

このコマンドを実行すると、[TinyTeX](https://yihui.org/tinytex/)というLaTeXディストリビューションがインストールされます。
ここまでで最低限のPDF出力環境が整います。

新規で`.qmd`ファイルを作成する手順を思い出し、出力形式をPDFにして作成してみましょう。
フロントマターのformatの項目が`pdf`になっていることを確認してください。
ファイルを編集してレンダーを行ってファイルを出力する点はこれまでの手順と同じです。

:::{.callout-important}
## LaTeXでの日本語のPDF出力

LaTeXを使ったPDF出力を行う際、いくつか追加設定が必要な場合があります。
以下は日本語を扱うPDFの生成のためのフロントマターの指定例です。

```
---
title: "日本語を含んだPDF"
format: 
  pdf:
    include-in-header:
      text: |
        \usepackage{zxjatype}
        \usepackage[ipaex]{zxjafont}
        \setmainfont{IPAexGothic}
---
```

LaTeXのパッケージである`zxjatype`と`zxjafont`を使って日本語の組版、フォントを指定しています。
日本語フォントの種類として`IPAexGothic`を指定していますが、他のフォントを指定することも可能です。
詳細は`zxjafont`の[ドキュメント](https://ctan.org/pkg/zxjafont)をご覧下さい。

:::

### Typst

次に[Typst](https://typst.app/docs)を利用したPDF出力方法を紹介します。
TypstはHTMLなどと同じマークアップ言語の一種です。
LaTeXの高度で柔軟な組版システムとWordやGoogleドキュメントなどのツールの代替となるように設計された新しい組版システムです。

バージョン1.4以降のQuartoでは、標準的にTypstが利用可能です。
フロントマターで`format: typst`を指定するか、コマンドラインで`--to typst`を指定することでTypstによるPDFの生成が可能です。

:::{.callout-important}
## Typstでの日本語のPDF出力

LaTeXを使ったPDF出力を行う際、いくつか追加設定が必要な場合があります。
以下は日本語を扱うPDFの生成のためのフロントマターの指定例です。

```
---
title: "日本語を含んだPDF"
format: 
  typst:
    mainfont: "Noto Sans JP"
---
```
:::
