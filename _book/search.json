[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rによるデータ分析ワークフローの効率化",
    "section": "",
    "text": "前書き",
    "crumbs": [
      "前書き"
    ]
  },
  {
    "objectID": "literacy.html",
    "href": "literacy.html",
    "title": "1  基礎（リテラシー）",
    "section": "",
    "text": "1.1 ディレクトリとパス\nコンピュータ上のファイルやディレクトリ（フォルダ）は、それぞれ一意の場所を持っています。 この場所を示すために、フォルダやファイルにはパス（path）と呼ばれるものが与えられます。 パスは、ファイルやディレクトリの住所のような存在で、文字列で表現されます。\nパスは、プログラムの実行時に重要な役割を果たします。 プログラムがファイルを読み込む際や、ファイルを書き込む際には、そのファイルのパスを指定する必要があります。 そのためプログラム初心者が最初につまづく要因の一つが、パスの指定方法です。 パスは正確に記述しないと、プログラムがファイルを特定できないためにエラーが発生します。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>基礎（リテラシー）</span>"
    ]
  },
  {
    "objectID": "literacy.html#ディレクトリとパス",
    "href": "literacy.html#ディレクトリとパス",
    "title": "1  基礎（リテラシー）",
    "section": "",
    "text": "1.1.1 Rにおける作業ディレクトリ\nRを使う際には、作業ディレクトリ（working directory）という概念が重要です。 作業ディレクトリは、Rがファイルを読み込む際や書き込む際の基準となるディレクトリです。 作業ディレクトリは特定のフォルダを指定します。 通常はユーザーのホームディレクトリが作業ディレクトリとなりますが、必要に応じてsetwd()関数を使用して変更可能です。\n\n\n\n作業ディレクトリ",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>基礎（リテラシー）</span>"
    ]
  },
  {
    "objectID": "literacy.html#環境",
    "href": "literacy.html#環境",
    "title": "1  基礎（リテラシー）",
    "section": "1.2 環境",
    "text": "1.2 環境\nコンピュータには、プログラムが動作するために必要な条件、設定が存在します。 この条件や設定のことを「環境」と呼びます。 環境はコンピュータのOS（オペレーティングシステム）、ハードウェア、ソフトウェア、ネットワークなど、さまざまな要素で構成されています。 そのため、コンピュータ間で同じ環境を用意することは容易ではありません。\n環境の違いは、プログラムの動作に影響を与えることがあります。 例えば、あるコンピュータで動作するプログラムが、別のコンピュータで動作しなかったり、出力結果が異なることがあります。 例を見てみましょう。 Rの作業ディレクトリを示す getwd() 関数をmacOSとWindowsで実行した場合、それぞれのOSに応じたディレクトリが表示されます。 以下は著者のR実行環境であるmacOSでの実行結果ですが、Windowsで実行した場合、ディレクトリの先頭は通常 C:/ となります。\n\ngetwd()\n\n[1] \"/Users/suryu/Documents/projects2024/rrr\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>基礎（リテラシー）</span>"
    ]
  },
  {
    "objectID": "literacy.html#プログラムのバージョン",
    "href": "literacy.html#プログラムのバージョン",
    "title": "1  基礎（リテラシー）",
    "section": "1.3 プログラムのバージョン",
    "text": "1.3 プログラムのバージョン\nプログラムは通常、バージョン（版）を示すための番号であるバージョン番号を持っています。 バージョン番号を見ることで、そのプログラムの新しさを知ることができます。\nプログラムは一度作成されると、その後も更新されていくのが普通です。 完成したプログラムにバグ修正や機能追加が行われると、バージョン番号が更新されます。 バージョン番号を見ることで、そのプログラムが新しいものなのか、また、リリースノートなどの情報を見ることで、どのような変更が行われたのか、どのような機能を持っているのかを知ることができます。\nバージョンの違いは環境の違いの一因となります。 あるバージョンでは実装されていないプログラムがあったり、 バージョンが古いために挙動が異なることがあります。\n\n1.3.1 セマンティックバージョニング\nバージョンの表記方法にはさまざまな形式があります。 その中で、セマンティックバージョニング（Semantic Versioning）は、バージョン番号の付け方の一つです。 バージョン番号を、Major.Minor.Patchの3つの数字で構成されます。\n\n\n\njmastatsパッケージのバージョン。0.2.2と示される通り、Minorバージョン2において2つ目の修正が行われたことがわかる。\n\n\n例えば1.2.3のバージョンは、Majorが1、Minorが2、Patchが3です。 バージョン番号を構成する3つの数字の意味は以下の通りです。 Majorは互換性がない変更があった場合に増やします。 Minorは互換性がある機能追加があった場合に増やします。 Patchは互換性があるバグ修正があった場合に増やします。\nセマンティックバージョニングは、バージョン番号の付け方を開発者間で統一することで、バージョン番号だけで互換性の情報を得られるようにするためのルールです。 上記のような規則がありますが、実際にはこの規則に従っていない場合もあります。\n\n\n1.3.2 Rのバージョン\nRのバージョンはセマンティックバージョニングと同様に3桁の数字で構成されています。 年度初めの4月下旬に新しいメジャーあるいはマイナーバージョンがリリースされることが多く、 その年度内には3、4回のパッチバージョンアップが行われるのが通例です。\n本書執筆時の最新版は、2024年6月にリリースされたR4.4.1です。 利用しているRのバージョンはR起動時のメッセージや versionの実行などで確認できます。\nRでのバージョンの違いは、R本体の機能だけでなく、インストール可能なパッケージにも影響を与えます。 パッケージによっては、動作条件に特定のRバージョンが必要となることがあります。 また、統合開発環境のRStudioの実行にはR3.6.0以上が必要です。\n\n\n1.3.3 バージョン更新の方針\nプログラムのバージョンは日々更新されています。 そのため、バージョンを最新版に保つことが重要です。 一方、バージョンを更新することで、以前のバージョンとの互換性がなくなることがあります。 また、複数人で実行するプログラムの場合、環境間でのバージョンの違いが問題となることがあります。 そのため、バージョンを更新する際には、その影響を十分に検討し、事前に方針を決めておくことが重要です。\n一つの方針として、常に最新のバージョンを利用することが挙げられます。 先に書いたような利点がありますが、プログラムに関わる全員が最新版を利用できる環境であることが前提となります。 もう一つの方針は、安定版を利用することです。 安定版は、バグが少なく、互換性が高いため、安定して利用できることが特徴です。 例えば最新バージョンが4.4.1である場合、4.3系の最新版である4.3.3を利用する、というような方針です。 この方針に従えばバージョン更新の手間を減らせますが、時間の経過とともに安定版の見直しを行うと良いでしょう。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>基礎（リテラシー）</span>"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "3  Gitによるバージョン管理",
    "section": "",
    "text": "3.1 バージョン管理\nデータ分析で用いるソースコードやデータは日々更新（バージョンアップ）されていきます。\nある日突然、以前実行可能だったコードがエラーを吐いたり、以前正常に動作していたコードが動かなくなったりすることがあります。\nバグとなるプログラムを書いてしまうことは誰にでもあることですが、そのような場合に、以前のバージョンに戻ることができると便利です。\n現在バグを起こしているバージョンから遡り、以前のバージョンに戻します。すると、バグが発生する前の状態に戻ることができます。\n間違いに気がついたり",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gitによるバージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#バージョン管理システム-git",
    "href": "git.html#バージョン管理システム-git",
    "title": "3  Gitによるバージョン管理",
    "section": "3.2 バージョン管理システム: Git",
    "text": "3.2 バージョン管理システム: Git\nバージョン管理システムには大別して2つの種類があります。\n分散型\n複数の開発者が共同でコードを管理・開発する際に便利な機能を提供するバージョン管理システムです。\n\n3.2.1 バージョン管理の流れ\n\nリポジトリの作成\nファイルの追加\nファイルのコミット\nファイルのプッシュ\n\n\n3.2.1.1 リポジトリの作成\ngit init",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gitによるバージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#rstudioでのバージョン管理",
    "href": "git.html#rstudioでのバージョン管理",
    "title": "3  Gitによるバージョン管理",
    "section": "3.3 RStudioでのバージョン管理",
    "text": "3.3 RStudioでのバージョン管理\nプロジェクト内には複数のファイルが存在します。\nターミナルあるいはGitパネルを使ってバージョン管理を行います。\nRStudioではGitとSVNによるバージョン管理をサポートしています。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gitによるバージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#github",
    "href": "git.html#github",
    "title": "3  Gitによるバージョン管理",
    "section": "3.4 GitHub",
    "text": "3.4 GitHub\nGitHub (https://github.com/) は、Gitリポジトリをホスティングするウェブサービスです。\nCRANで配布されるRパッケージのソースコードも多く管理されます。\nまた、CRANに登録されていないパッケージも多く、GitHubからインストールすることができます。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gitによるバージョン管理</span>"
    ]
  }
]