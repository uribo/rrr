[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rによるデータ分析ワークフローの効率化",
    "section": "",
    "text": "前書き",
    "crumbs": [
      "前書き"
    ]
  },
  {
    "objectID": "literacy.html",
    "href": "literacy.html",
    "title": "1  基礎（リテラシー）",
    "section": "",
    "text": "1.1 ディレクトリとパス\nコンピュータ上のファイルやディレクトリ（フォルダ）は、それぞれ一意の場所を持っています。 この場所を示すために、フォルダやファイルにはパス（path）と呼ばれるものが与えられます。 パスは、ファイルやディレクトリの住所のような存在で、文字列で表現されます。\nパスは、プログラムの実行時に重要な役割を果たします。 プログラムがファイルを読み込む際や、ファイルを書き込む際には、そのファイルのパスを指定する必要があります。 そのためプログラム初心者が最初につまづく要因の一つが、パスの指定方法です。 パスは正確に記述しないと、プログラムがファイルを特定できないためにエラーが発生します。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>基礎（リテラシー）</span>"
    ]
  },
  {
    "objectID": "literacy.html#ディレクトリとパス",
    "href": "literacy.html#ディレクトリとパス",
    "title": "1  基礎（リテラシー）",
    "section": "",
    "text": "1.1.1 Rにおける作業ディレクトリ\nRを使う際には、作業ディレクトリ（working directory）という概念が重要です。 作業ディレクトリは、Rがファイルを読み込む際や書き込む際の基準となるディレクトリです。 作業ディレクトリは特定のフォルダを指定します。 通常はユーザーのホームディレクトリが作業ディレクトリとなりますが、必要に応じてsetwd()関数を使用して変更可能です。\n\n\n\n作業ディレクトリ",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>基礎（リテラシー）</span>"
    ]
  },
  {
    "objectID": "literacy.html#環境",
    "href": "literacy.html#環境",
    "title": "1  基礎（リテラシー）",
    "section": "1.2 環境",
    "text": "1.2 環境\nコンピュータには、プログラムが動作するために必要な条件、設定が存在します。 この条件や設定のことを「環境」と呼びます。 環境はコンピュータのOS（オペレーティングシステム）、ハードウェア、ソフトウェア、ネットワークなど、さまざまな要素で構成されています。 そのため、コンピュータ間で同じ環境を用意することは容易ではありません。\n環境の違いは、プログラムの動作に影響を与えることがあります。 例えば、あるコンピュータで動作するプログラムが、別のコンピュータで動作しなかったり、出力結果が異なることがあります。 例を見てみましょう。 Rの作業ディレクトリを示す getwd() 関数をmacOSとWindowsで実行した場合、それぞれのOSに応じたディレクトリが表示されます。 以下は著者のR実行環境であるmacOSでの実行結果ですが、Windowsで実行した場合、ディレクトリの先頭は通常 C:/ となります。\n\ngetwd()\n\n[1] \"/Users/suryu/Documents/projects2024/rrr\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>基礎（リテラシー）</span>"
    ]
  },
  {
    "objectID": "literacy.html#プログラムのバージョン",
    "href": "literacy.html#プログラムのバージョン",
    "title": "1  基礎（リテラシー）",
    "section": "1.3 プログラムのバージョン",
    "text": "1.3 プログラムのバージョン\nプログラムは通常、バージョン（版）を示すための番号であるバージョン番号を持っています。 バージョン番号を見ることで、そのプログラムの新しさを知ることができます。\nプログラムは一度作成されると、その後も更新されていくのが普通です。 完成したプログラムにバグ修正や機能追加が行われると、バージョン番号が更新されます。 バージョン番号を見ることで、そのプログラムが新しいものなのか、また、リリースノートなどの情報を見ることで、どのような変更が行われたのか、どのような機能を持っているのかを知ることができます。\nバージョンの違いは環境の違いの一因となります。 あるバージョンでは実装されていないプログラムがあったり、 バージョンが古いために挙動が異なることがあります。\n\n1.3.1 セマンティックバージョニング\nバージョンの表記方法にはさまざまな形式があります。 その中で、セマンティックバージョニング（Semantic Versioning）は、バージョン番号の付け方の一つです。 バージョン番号を、Major.Minor.Patchの3つの数字で構成されます。\n\n\n\njmastatsパッケージのバージョン。0.2.2と示される通り、Minorバージョン2において2つ目の修正が行われたことがわかる。\n\n\n例えば1.2.3のバージョンは、Majorが1、Minorが2、Patchが3です。 バージョン番号を構成する3つの数字の意味は以下の通りです。 Majorは互換性がない変更があった場合に増やします。 Minorは互換性がある機能追加があった場合に増やします。 Patchは互換性があるバグ修正があった場合に増やします。\nセマンティックバージョニングは、バージョン番号の付け方を開発者間で統一することで、バージョン番号だけで互換性の情報を得られるようにするためのルールです。 上記のような規則がありますが、実際にはこの規則に従っていない場合もあります。\n\n\n1.3.2 Rのバージョン\nRのバージョンはセマンティックバージョニングと同様に3桁の数字で構成されています。 年度初めの4月下旬に新しいメジャーあるいはマイナーバージョンがリリースされることが多く、 その年度内には3、4回のパッチバージョンアップが行われるのが通例です。\n本書執筆時の最新版は、2024年6月にリリースされたR4.4.1です。 利用しているRのバージョンはR起動時のメッセージや versionの実行などで確認できます。\nRでのバージョンの違いは、R本体の機能だけでなく、インストール可能なパッケージにも影響を与えます。 パッケージによっては、動作条件に特定のRバージョンが必要となることがあります。 また、統合開発環境のRStudioの実行にはR3.6.0以上が必要です。\n\n\n1.3.3 バージョン更新の方針\nプログラムのバージョンは日々更新されています。 そのため、バージョンを最新版に保つことが重要です。 一方、バージョンを更新することで、以前のバージョンとの互換性がなくなることがあります。 また、複数人で実行するプログラムの場合、環境間でのバージョンの違いが問題となることがあります。 そのため、バージョンを更新する際には、その影響を十分に検討し、事前に方針を決めておくことが重要です。\n一つの方針として、常に最新のバージョンを利用することが挙げられます。 先に書いたような利点がありますが、プログラムに関わる全員が最新版を利用できる環境であることが前提となります。 もう一つの方針は、安定版を利用することです。 安定版は、バグが少なく、互換性が高いため、安定して利用できることが特徴です。 例えば最新バージョンが4.4.1である場合、4.3系の最新版である4.3.3を利用する、というような方針です。 この方針に従えばバージョン更新の手間を減らせますが、時間の経過とともに安定版の見直しを行うと良いでしょう。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>基礎（リテラシー）</span>"
    ]
  },
  {
    "objectID": "reproducibility.html",
    "href": "reproducibility.html",
    "title": "2  再現可能性",
    "section": "",
    "text": "2.1 再現性を阻害する要因\nset.seed(123)\n乱数",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>再現可能性</span>"
    ]
  },
  {
    "objectID": "reproducibility.html#再現性を阻害する要因",
    "href": "reproducibility.html#再現性を阻害する要因",
    "title": "2  再現可能性",
    "section": "",
    "text": "ランダム性\nデータの変更\n環境の違い",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>再現可能性</span>"
    ]
  },
  {
    "objectID": "reproducibility.html#rig",
    "href": "reproducibility.html#rig",
    "title": "2  再現可能性",
    "section": "2.2 rig",
    "text": "2.2 rig\n複数のRのバージョンを共存、切り替えることができます。\nhttps://github.com/r-lib/rig",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>再現可能性</span>"
    ]
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "3  プロジェクト",
    "section": "",
    "text": "3.1 統合開発環境\nプログラム開発で必要なエディタやコンパイラ、デバッガなどのツールを一つにまとめたものを統合開発環境（IDE: Integrated Development Environment）と呼びます。 Rは単体のアプリケーションとして提供されていますが、RStudioやVS CodeというIDEを利用することで、より使いやすく、効率的に作業を行えるようになる利点があります。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>プロジェクト</span>"
    ]
  },
  {
    "objectID": "project.html#rstudio",
    "href": "project.html#rstudio",
    "title": "3  プロジェクト",
    "section": "3.2 RStudio",
    "text": "3.2 RStudio\nRStudioは、RおよびPythonのための統合開発環境（IDE）です。 Posit（旧RStudio）により開発されており、無償で利用可能なものとしてデスクトップ版とサーバー版が存在します。 デスクトップ版の実行には、R 3.6.0以上のインストールが必要です。\nRStudioの特徴は、Rの実行に必要、利便性を高める機能を「ペイン」と呼ばれる区画に分けて表示していることです。\nRStudioの機能は 松村優哉 ほか (2021) に詳しく記載されています。\n\n3.2.1 RStudioのプロジェクト\nRStudioではプロジェクト機能を利用して、データやコード、成果物を一つのまとまりとして扱うことができます。 また、Gitバージョン管理との連携も可能で\n\nrstudioapi::openProject(\"~/Documents/projects2024/rrr-demo\")\n\n\n\n\n再現可能なデータ分析プロジェクトの立ち上げ。2つのチェックボックスにチェックをつけて作成することで、gitリポジトリの初期化とrenvパッケージによるパッケージの管理が設定され、再現可能性が高まる。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>プロジェクト</span>"
    ]
  },
  {
    "objectID": "project.html#vs-codeの利用",
    "href": "project.html#vs-codeの利用",
    "title": "3  プロジェクト",
    "section": "3.3 VS Codeの利用",
    "text": "3.3 VS Codeの利用\nMicrosoftが提供するVisual Studio Code (VS Code)もRの開発環境の選択肢となります。 標準ではRの実行環境は提供されていませんが、拡張機能をインストールすることでRStudioのようにコーディングから実行までシームレスに行うことができます。\nVS Codeでは、作業空間と呼ばれる単位で関連するファイルを管理します。 これはRStudioのプロジェクト機能と類似の考え方です。\nVS Codeの特徴は、Rだけでなくさまざまな言語の開発に対応していることです。 拡張機能を利用することで、ユーザーが必要とする機能を追加することができます。 拡張機能には、Git、GitHubとの連携を行うものやドキュメントの生成を容易に行うものなどがあります。 これによりデータ分析の作業を効率的に行うことが期待されます。\n\n3.3.1 Positron\n現時点で正式なリリースはされていませんが、PositがオープンソースのVS Codeをベースに開発を進めるPositronも、RやPythonといったデータ分析で用いる言語に特化した統合開発環境として注目されています。\nVS Code同様に拡張機能によって、多様な機能を追加できる点も魅力の一つです。 VS Codeとの違いは、ライセンス上の問題からインストール可能な機能拡張は[Open VSX Registry] (https://open-vsx.org/)で管理されるものに限定されるという点です。 ここには数多くの拡張機能が登録されていますが、すべてではありません。 いくつかの拡張機能は本家のVS Codeでのみ利用可能です。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>プロジェクト</span>"
    ]
  },
  {
    "objectID": "project.html#hereパッケージ",
    "href": "project.html#hereパッケージ",
    "title": "3  プロジェクト",
    "section": "3.4 hereパッケージ",
    "text": "3.4 hereパッケージ",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>プロジェクト</span>"
    ]
  },
  {
    "objectID": "project.html#スタイルガイド",
    "href": "project.html#スタイルガイド",
    "title": "3  プロジェクト",
    "section": "3.5 スタイルガイド",
    "text": "3.5 スタイルガイド\n\n\n\n\n松村優哉, 湯谷啓明, 紀ノ定保礼, と 前田和寛. 2021. RユーザのためのRStudio〈実践〉入門 : tidyverseによるモダンな分析フローの世界. 技術評論社. https://gihyo.jp/book/2021/978-4-297-12170-9.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>プロジェクト</span>"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "4  バージョン管理",
    "section": "",
    "text": "4.1 バージョン管理の必要性\nデータ分析で用いるソースコードやデータは日々更新（バージョンアップ）されていきます。 ある日の作業では、データ読み込みのプログラムを書いて、次の日にはデータの前処理と可視化のプログラムを書くという流れです。 またある日には、これまで使っていたデータを新しいデータに差し替えることもあるでしょう。 そんな中で、ある日突然、以前実行可能だったコードがエラーを吐いたり、以前正常に動作していたコードが動かなくなったりすることがあります。\nバグとなるプログラムを書いてしまうことは誰にでもあることですが、そのような場合に、以前のバージョンに戻ることができると便利です。\n同じファイルに対して、複数のバージョンを保存しておくことがバージョン管理の目的です。\n現在バグを起こしているバージョンから遡り、以前のバージョンに戻します。すると、バグが発生する前の状態に戻ることができます。\n間違いに気がついたり\n一人で使う場合にも利点はあります。\n作業の記録\nバージョン管理で期待されること",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>バージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#バージョン管理の必要性",
    "href": "git.html#バージョン管理の必要性",
    "title": "4  バージョン管理",
    "section": "",
    "text": "バックアップ\n実験的な操作\n共同作業とレビュー\n履歴",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>バージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#バージョン管理システム-git",
    "href": "git.html#バージョン管理システム-git",
    "title": "4  バージョン管理",
    "section": "4.2 バージョン管理システム: Git",
    "text": "4.2 バージョン管理システム: Git\nバージョン管理システムには大別して2つの種類があります。\n分散型\n複数の開発者が共同でコードを管理・開発する際に便利な機能を提供するバージョン管理システムです。\nバージョン管理システムを導入しないプロジェクトでは、ファイルが煩雑になりがちです。\nどのファイルが最新のものなのか、どのデータを使うのかがわからなくなることもあります。\nここではGitのインストール方法や詳細なGitの説明は行いません。横田紋奈 と 宇賀神みずき (2022) や 渡辺宙志 (2024) を参考にしてください。オンラインで読めるPro Gitもあります。\n\n4.2.1 リポジトリ\nGitではファイルやディレクトリの状態を記録し、変更履歴を管理する場所をリポジトリと呼びます。 リポジトリには、プロジェクトに関連するコードやファイルが含まれます。\nリポジトリは、性質の違いによりローカルリポジトリとリモートリポジトリに分けられます。 ローカルリポジトリは、自分のコンピュータ上に保存されているリポジトリです。 個々の開発者が自身の作業を管理し、変更履歴を保存するために使用されます。\nリモートリポジトリは、ネットワーク上のサーバーに保存されているリポジトリです。 ネットワークを介して、複数の開発者がアクセス可能であり、共同作業（共有と同期）を行うために使用されます。\nGitリポジトリを使った開発の流れは、開発者個人がそれぞれのローカルリポジトリで作業を行い、リモートリポジトリに変更を反映するというものです。 そのため、リモートリポジトリはバックアップとしての役割も果たします。",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>バージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#バージョン管理の流れ",
    "href": "git.html#バージョン管理の流れ",
    "title": "4  バージョン管理",
    "section": "4.3 バージョン管理の流れ",
    "text": "4.3 バージョン管理の流れ\n最低限必要なコマンドを紹介しますので、まずはバージョン管理の雰囲気をつかんでください。 Gitバージョン管理は次の3つのステップで行います。\n\nリポジトリの作成\nファイルの追加\nファイルのコミット\n\nGitには100を超えるコマンドがありますが、覚えるべきコマンドは限定的です。 上記のバージョン管理の流れでは、それぞれ数個のコマンドを使います。 つまり、一連のバージョン管理で用いるコマンドは指で数えられる範囲に収まります。\n最初の作業は一度行えば、その後は実行する必要がなくなるので、実際は2つのステップとなります。\n\n4.3.1 リポジトリの作成\nこれからプロジェクトを立ち上げる、あるいは既存のプロジェクトをGitで管理する場合、まずリポジトリを作成します。 git initコマンドを実行すると、現在のディレクトリに.gitフォルダが作成されます。 このフォルダはGitリポジトリの中心的な役割を果たします。隠しフォルダとなっており、ユーザーが直接操作することはありません。\n\n\n4.3.2 ファイルの追加: ステージングエリアへの登録\nリポジトリにバージョン管理の対象とするファイルを追加するには、git addコマンドを使います。 リポジトリにファイルがない場合、何かファイルを作成してみてください。 その後、git statusというコマンドを実行すると Untracked files という箇所に作成したファイル名が表示されます。 この状態のファイルをリポジトリに追加するには、git addコマンドを使います。\n`git add &lt;ファイル名&gt;`\ngit addしたファイルは、ステージングエリアという仮想的な場所に追加されます。 ステージングエリアに追加されたファイルは、次にコミットする対象となります。\nUntracked状態のファイルが複数ある場合、git add .というコマンドを使うと、全てのファイルを一括で追加できます。\n\n\n4.3.3 ファイルのコミット\n作成・変更したファイルの状態を記録する作業をGitでは「コミット」と呼びます。 コミットを重ねることで、ファイルの変更履歴を残すことができ、必要に応じて過去の状態に遡ることができます。\nコミットの対象となるのは、ステージングエリアに追加されたファイルです。 そのためgit addを行う前にgit commitを行うと、コミット対象のファイルがないというエラーが表示されるので注意してください。\ngit commitコマンドを使って、ファイルの変更をコミットします。 コミットには、コミットメッセージと呼ばれる説明文を付けることができます。 作業後、コミットの履歴を見た際に、どのような変更を行ったかを把握するために重要な情報となります。 なぜその変更を行ったのか、どのような変更を行ったのかを記述します。\n\n\n\n\n\n\n最低限のGit設定\n\n\n\nコミットを行う際には、氏名とメールアドレスの設定が必要となります。 2つの設定は、Gitのコミットログで誰がコミットしたかを示すために必要な情報です。\nターミナルを開いて以下のコマンドを実行します。 二重引用符で示した箇所は適宜変更してください。\n`git config --global user.name \"&lt;あなたの名前&gt;\"`\n`git config --global user.email \"&lt;あなたのメールアドレス&gt;\"`\n設定が完了したかどうかは、以下のコマンドで確認できます。\n`git config --list`\nこの出力でuser.nameとuser.emailが正しく表示されていれば、設定が完了しています。\n\n\nコミットメッセージは、以下のような形式で記述します。\n\n1行目: 変更内容の要約\n2行目: 空行\n3行目以降: 変更内容の詳細\n\nGitに不慣れな方は、コミットメッセージを書くことに障壁を感じるかもしれません。 しかし、難しく考える必要はありません。 ここで大事なことはコミットを残すことです。コミットメッセージは後から修正することもできますし、正解があるわけではありません。 簡単な情報であっても、コミットメッセージを残すことが大切です。",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>バージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#アプリケーションを利用したバージョン管理",
    "href": "git.html#アプリケーションを利用したバージョン管理",
    "title": "4  バージョン管理",
    "section": "4.4 アプリケーションを利用したバージョン管理",
    "text": "4.4 アプリケーションを利用したバージョン管理\nGitはコマンドラインツールですが、GUIアプリケーションを使うことで、より簡単にバージョン管理を行うことができます。 Rの統合開発環境であるRStudioやVSCodeでも、Gitと連携した操作が可能です。 分析作業から離れずにバージョン管理を行うことができるため、非常に便利です。 すべてのコマンドを実行可能なわけではありませんが、基本的な操作はGUIを通して行えます。\n\n4.4.1 RStudio\nターミナルあるいはGitパネルを使ってバージョン管理を行います。 ここではGUIで操作可能な方法を紹介します。 なおRStudioのGUIでは、GitとSVNによるバージョン管理をサポートしています。\n.gitフォルダが存在するプロジェクトを開くと、RStudioはGitパネルを表示します。 この画面がRStudioでのGUIによるバージョン管理処理の中心となります。 もしもGitパネルが見つからない場合、メニューのTools、Global Options…から、Git/SVNにてEnable version control interface for RStudio projectsにチェックを入れてください。\nGitパネルには、ファイルの差分やコミット履歴を確認するボタンが用意されています。 メインとなるのはStaged、Status、Pathの3列で構成される箇所です。 それぞれの列には次の意味があります。\n\nStaged: ステージングエリアに追加されたファイル\nStatus: ファイルの状態\nPath: ファイルのパス\n\nStagedはチェックボックスになっており、ステージングエリアに追加するファイルを選択できるようになっています。 これにより、git addコマンドを使わずにステージングエリアへの登録が行えます。 Shiftキーを押しながらの選択で、複数ファイルの選択も可能です。\n次のStatusには、いくつかのアイコンが表示されます。 各アイコンの意味は下記の通りです。\n\n\n\n\n\n\n\n\nアイコン\n色\n状態\n\n\n\n\n? \n黄\nuntracked バージョン管理の対象になっていない\n\n\nModified \n青\nリポジトリの状態から変更された\n\n\nDelete \n赤\nリポジトリにあったファイルが削除された\n\n\nAdded \n緑\n新たにバージョン管理状態になった\n\n\nUnresolved \n橙\nリポジトリ間で差分が衝突している\n\n\nRrenamed\n紫\nファイル名が変更された\n\n\n\n\n\n4.4.2 VSCode\n\nリポジトリを初期化する",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>バージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#github",
    "href": "git.html#github",
    "title": "4  バージョン管理",
    "section": "4.5 GitHub",
    "text": "4.5 GitHub\nGitHub (https://github.com/) は、Gitリポジトリをホスティングするウェブサービス（リモートリポジトリ）です。 世界中のさまざまなプロジェクトで採用されるリモートリポジトリであり、オープンソースプロジェクトの共有やコラボレーションに広く利用されています。 ウェブサイトの閲覧は誰でもできますが、主要な機能を利用する際にはアカウントの作成が必要です。\nGitHub上のリポジトリには、誰でもアクセス可能なパブリックリポジトリと、特定のユーザーのみがアクセス可能なプライベートリポジトリの2種類があります。 プライベートリポジトリは\nリポジトリのURLは https://github.com/&lt;アカウント名&gt;/&lt;リポジトリ名&gt; となります。\nCRANで配布されるRパッケージのソースコードも多く管理されます。\nRパッケージのソースコードをGitHubで管理する開発者も多く、CRANで配布されるものだけでなく、CRANポリシーに適合しないなどの理由でCRANでは配布されないパッケージも豊富に存在します。 remotesやpakパッケージを使えば、これらのGitHub上で配布されるRパッケージのインストールも可能です。\nGitのコミットログが増えてくる\nプロジェクトを一人で進める場合でも、複数台のコンピュータで作業を行う際に\nGitHub上のリモートリポジトリを介して、複数のコンピュータでファイルを共有できます。\nバックアップとして機能します。\nGitHubにはここで取り上げる内容以外にも多くの機能があります。GitHub公式が提供するGitHub Skillsでは、実際のGitHubリポジトリを操作してGitHubの使い方を学ぶことができます。\n\n4.5.1 ローカルリポジトリの紐付け\nプロジェクトの章で作成したプロジェクト（rrr-demo）をGitHubと紐付けます。\n\n\n\nGitHubでの新規リポジトリの作成\n\n\n\ngit remote add origin https://github.com/uribo/rrr-demo.git\ngit branch -M main\ngit push -u origin main\n\n\n4.5.2 リモートリポジトリのクローン\n新しいコンピュータなど、ローカルリポジトリを持っていない場合には、リモートリポジトリをクローンします。\ngit clone\n\ngit clone https://github.com/uribo/rrr-demo.git ~/Documents/projects2024/rrr-demo\n変更の同期 git pull, git fetch\nクローンしたリポジトリはローカルリポジトリとして扱うことができます。\n\n\n4.5.3 GitHub Issues\nプロジェクトに関する問題やメモのために利用できます。",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>バージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#バージョン管理の流れ再び",
    "href": "git.html#バージョン管理の流れ再び",
    "title": "4  バージョン管理",
    "section": "4.6 バージョン管理の流れ再び",
    "text": "4.6 バージョン管理の流れ再び\nコミット後のステップとして、以下が追加されます。\n\nリモートリポジトリの指定\nファイルのプッシュ\n\n\n4.6.1 ファイルのプッシュ\nコミットを行ったら、変更を確定させるためのプッシュを行います。 プッシュを行うことで、リモートリポジトリに変更内容が反映されます。\ngit push",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>バージョン管理</span>"
    ]
  },
  {
    "objectID": "git.html#gitignore",
    "href": "git.html#gitignore",
    "title": "4  バージョン管理",
    "section": "4.7 .gitignore",
    "text": "4.7 .gitignore\nGitバージョン管理を行うリポジトリでは、バージョン管理に含めるべきではないファイルが存在します。 例えば、セキュリティ上重要な情報を含むファイルやキャッシュファイルなどです。 これらがバージョン管理に含まれると、セキュリティリスクが高まったり、リポジトリのサイズが大きくなるなどの問題が発生します。 実際に、GitHubなどのリモートリポジトリにデータベースの接続情報やAPIキーなどの機密情報が含まれていると、悪意のある第三者によって悪用される可能性があります。\nGitでは.gitignoreにバージョン管理の対象外とするファイルを記録することで、上記の問題の解決を図っています。 バージョン管理を行わないファイルの指定方法は、gitignoreにそのファイル名や名称のパターンを記述することで行います。 .gitignoreファイルはリポジトリ内の任意の場所に配置することができますが、通常はリポジトリのルートディレクトリ、.git/フォルダと同じ階層に配置します。\n.gitignoreに記録するファイルはプロジェクトによって異なりますが、一般的にバージョン管理から除外される種類のファイルが存在します。 特にファイルやフォルダ名の先頭に . が付いているものは、バージョン管理から除外することが一般的です。 こうしたファイルやフォルダは隠しファイル、隠しフォルダと呼ばれ、システムによって生成され、ユーザーが直接操作することは限定的です。 加えて、サイズが大きかったり差分管理が困難なバイナリファイルはバージョン管理の対象外となることが多いです。\n.gitignoreの記載例を示します。.gitignoreでは特定の正規表現を使って複数のファイルを指定したり、否定の表現（つまり管理に含める）を使った柔軟な指定が可能です。\nThumbs.db\n.DS_Store\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\n*.pdf\n*.log\nREADME.html\nThumbs.dbや.DS_Storeは目にしたことがない方もいるかもしれません。 これらはWindowsやmacOSで生成されるファイルで、フォルダ内のファイルのサムネイルや表示方法を記録するファイルです。 プロジェクト内のコードには影響を与えないため、バージョン管理は不要です。\n続いての.Rproj.userから.RuserdataはRに関連するものです。 特に.Rproj.userはRStudioのプロジェクト設定ファイルを含むフォルダでバージョン管理を行いません。 .Rhistoryや.RDataはRの履歴やデータを保存するファイルですが、ユーザーやセッションの度に更新されるものであるため、これらもバージョン管理を行いません。\n*.pdf、*.logはPDFおよびlog形式のファイル一式を除外する指示です。ファイル名に関わらず、拡張子によって除外される複数のファイルを想定しています。 アスタリスク（*）は任意の文字列を表し、*.pdfは拡張子が.pdfであるファイルをすべて指定します。\n拡張子による指定という点で、その次の行 README.html も同様ですが、*.pdfや*.logと異なるのはプロジェクト内のすべてのHTMLファイルを除外するわけではないという点です。 README.htmlは特定のファイル名を指定しています。つまり対象外となるのは1つのファイルだけです。\n作成した覚えのないファイルやフォルダがGitバージョン管理の対象となっているときは、注意してそのファイルをバージョン管理に含めるべきかを検討してください。 著者の経験では、身に覚えのないファイルは一時的に生成されたものや成果物であることが多く、バージョン管理の対象外とすることが多いです。\n\n\n\n\n横田紋奈, と 宇賀神みずき. 2022. いちばんやさしいGit & GitHubの教本 : 人気講師が教えるバージョン管理&共有入門. 第2版 版. インプレス. https://ndlsearch.ndl.go.jp/books/R100000002-I032013125.\n\n\n渡辺宙志. 2024. ゼロから学ぶGit/GitHub : 現代的なソフトウェア開発のために. 講談社. https://ndlsearch.ndl.go.jp/books/R100000002-I033407628.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>バージョン管理</span>"
    ]
  },
  {
    "objectID": "document.html",
    "href": "document.html",
    "title": "5  ドキュメントの作成",
    "section": "",
    "text": "5.1 文芸的プログラミング\n通常のコンピュータプログラミングでは、プログラムのソースコードと実行結果は別々に扱われます。 コードと結果の関連性が失われている状態です。\n例えばRの場合、スクリプトファイルにコードを書いて実行すると、コンソールに結果が表示されます。 コンソールに表示された結果をコピーして、別のファイルに貼り付けることで、ソースコードと結果を一つのファイルにまとめることができますが、コピーをし忘れたり、間違って貼り付けたりすることがあります。 またこのような作業では、データや処理内容を変更する度に上書きの必要性が生じるので手間がかかります。\n文芸的プログラミングは、ソースコードと結果を含めた関連するドキュメントを一つのファイルにまとめることで、コードと結果の関連性を保ちながらドキュメントを作成する方法です。 コードの変更に伴って出力結果も自動的に更新されるため、手作業でのコピー&ペースト作業が不要になります。 このように動的に生成されるドキュメントを作成するツールとして、R MarkdownやJupyter Notebook(Jupyter)が有名です。",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ドキュメントの作成</span>"
    ]
  },
  {
    "objectID": "document.html#quarto",
    "href": "document.html#quarto",
    "title": "5  ドキュメントの作成",
    "section": "5.2 Quarto",
    "text": "5.2 Quarto\nQuartoはPositがオープンソースで開発している動的ドキュメント作成システムです。 Jupyterやプレーンテキストで書かれたファイルをもとに、HTMLやPDF、Wordなどのさまざまな形式でのドキュメントを作成することができます。 Rだけでなく、PythonやJuliaなどのプログラミング言語にも対応しています。\nRユーザにとっては、動的ドキュメントの作成にR Markdownを使うことが一般的ですが、QuartoはR Markdownの後継としても位置づけられています。 そのため、R Markdownの機能をほぼそのまま利用することができます。 実際、QuartoでのR言語の評価はR Markdown同様、knitrパッケージを介して行われます。\nここではQuartoの基本的な使い方として単一のドキュメント生成の手順を紹介します。 一方、Quartoにはウェブサイト、ブログ、書籍執筆をサポートする機能もあります。 これらのQuartoの詳細については公式ドキュメントを参照してください。\nR Markdownの基礎は 松村優哉 ほか (2021) にまとまっています。\n\n5.2.1 Quartoによるドキュメントの作成\nQuartoでは、.qmdという拡張子のファイルを作成し、その中にコードと必要な文章を記述します。 .qmdファイルをもとに任意の形式でのドキュメントを生成します。 .qmdファイルの基本構成は以下の通りです。\n\nフロントマター… ドキュメントのメタデータ（タイトルや著者名、出力形式などの実行オプション等）を記述する部分。YAML形式で記述します。\n文章… ドキュメントの本文。プレーンテキストに加えて、Markdown記法による文字装飾、LaTeX記法による数式記述が可能です。\nコードブロック（コードセル）1 …\n\n\n\n\nQuartoの基本構成要素\n\n\nファイルの先頭にYAMLの形式でメタデータを記述します。 以降はドキュメントの文章とコードとなります。\nコードブロックの宣言は、R Markdown同様、バッククォート(`)を使います。 コードブロックの宣言部分には {} の中に言語名を記述します。 Rの場合はr、Pythonではpython、Juliaではjuliaとなります。\nコードブロックには、プログラムやその出力に関する挙動を制御する実行オプションを記述できます2。 指定可能なオプションとして、echo（コードの表示有無）、eval（コードの評価有無）、図のサイズやキャプションなどがあります。\nコードブロックの実行オプションは以下のように記述します。 コードブロックの上部に#|を記述し、その後にオプション名とパラメータを記述します。 論理値での指定が必要な実行オプションはtrueまたはfalseで指定します。 Rの論理値の指定はすべて大文字で行いますが、ここではすべて小文字で表記するので注意してください。\n```{r}\n#| eval: true\n#| echo: false\n#| fig-width: 5\n#| fig-height: 5\n#| fig-cap: \"グラフの描画\"\nlibrary(ggplot2)\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point() +\n  labs(title = \"燃費と重量の関係\")\n```\n必要な文章とコードを記載したら、Quartoのコマンドを使ってドキュメントを生成します。 .qmdファイルからのドキュメント生成の工程を、Quartoではレンダーと呼びます。 レンダーは.qmdファイルだけでなく、Jupyterで使われる.ipynbファイルからも行うことができます。\nレンダーはコマンドラインを使って以下のように行います。\nquarto render document.qmd --to html\nこのコマンドを実行するとdocument.qmdファイルをもとにHTML形式のドキュメントを生成します。 出力形式をWordファイルに変更する場合は、--toオプションの引数をdocxに変更するだけです。\nquarto render document.qmd --to docx\nRStudioやVS Codeなどのアプリケーションでは、Quartoのコマンドを実行するためのインターフェースが提供されています。 これにより、コマンドの入力の手間がなくなり、より直感的にQuartoを使うことができます。\n\n\n5.2.2 RStudioでのQuartoの利用\nQuartoの機能を試すために、RStudioで新しい.qmdファイルを作成してみましょう。 Quartoが利用可能な状況であれば、RStudioからQuartoを使うことができます。 メニューから「File」、「New File」、「Quarto Document…」の順に進むと以下のような画面が表示されます。\n\n\n\nRStudioでのqmdファイルの新規作成\n\n\nタイトルや出力形式を指定して「Create」ボタンをクリックすると新しい.qmdファイルが作成されます。 また、エンジンとしてKnitrかJupyterが選択可能です。Knitr、つまりRのエンジンであってもreticulateパッケージにより Pythonの実行ができますが、Jupyterを指定することで直接Pythonの実行が可能になります。\nソースパネルに新たに作成されたファイル内にコードと文章を記述して、レンダーを行います。 レンダーはソースパネル上の「Render」ボタンより実行します。ボタンをクリックすると、バックグラウンドでquartoのコマンドが実行され、.qmdファイル中のソースコードの実行結果をもとに指定した形式のドキュメントが生成されます。\nRStudioでは、Ctrl+Alt+I（macOSではCommand+Option+I）のショートカットキーを使うことで、コードブロックを追加できます。\n\n\n5.2.3 PDFの出力\nQuartoで日本語のPDFを生成する場合、2つの選択肢があります。 一つは出力形式を指定する際にpdfを指定する方法です。これはLaTeXを使ってPDFを生成する方法です。 もう一つの方法はtypstを出力形式として指定する方法です。 まずは一般的なLaTeXによるPDF出力方法を見てみましょう。\n\n5.2.3.1 LaTeX\nLaTeXを使ったPDF出力を行う場合、事前にLaTeXの環境を揃える必要があります。\nQuartoのコマンドからもLaTeX環境を導入可能です。\nquarto install tinytex\nこのコマンドを実行すると、TinyTeXというLaTeXディストリビューションがインストールされます。 ここまでで最低限のPDF出力環境が整います。\n新規で.qmdファイルを作成する手順を思い出し、出力形式をPDFにして作成してみましょう。 フロントマターのformatの項目がpdfになっていることを確認してください。 ファイルを編集してレンダーを行ってファイルを出力する点はこれまでの手順と同じです。\n\n\n\n\n\n\nLaTeXでの日本語のPDF出力\n\n\n\nLaTeXを使ったPDF出力を行う際、いくつか追加設定が必要な場合があります。 以下は日本語を扱うPDFの生成のためのフロントマターの指定例です。\n---\ntitle: \"日本語を含んだPDF\"\nformat: \n  pdf:\n    include-in-header:\n      text: |\n        \\usepackage{zxjatype}\n        \\usepackage[ipaex]{zxjafont}\n        \\setmainfont{IPAexGothic}\n---\nLaTeXのパッケージであるzxjatypeとzxjafontを使って日本語の組版、フォントを指定しています。 日本語フォントの種類としてIPAexGothicを指定していますが、他のフォントを指定することも可能です。 詳細はzxjafontのドキュメントをご覧下さい。\n\n\n\n\n5.2.3.2 Typst\n次にTypstを利用したPDF出力方法を紹介します。 TypstはHTMLなどと同じマークアップ言語の一種です。 LaTeXの高度で柔軟な組版システムとWordやGoogleドキュメントなどのツールの代替となるように設計された新しい組版システムです。\nバージョン1.4以降のQuartoでは、標準的にTypstが利用可能です。 フロントマターでformat: typstを指定するか、コマンドラインで--to typstを指定することでTypstによるPDFの生成が可能です。\n\n\n\n\n\n\nTypstでの日本語のPDF出力\n\n\n\nLaTeXを使ったPDF出力を行う際、いくつか追加設定が必要な場合があります。 以下は日本語を扱うPDFの生成のためのフロントマターの指定例です。\n---\ntitle: \"日本語を含んだPDF\"\nformat: \n  typst:\n    mainfont: \"Noto Sans JP\"\n---\n\n\n\n\n\n\n松村優哉, 湯谷啓明, 紀ノ定保礼, と 前田和寛. 2021. RユーザのためのRStudio〈実践〉入門 : tidyverseによるモダンな分析フローの世界. 技術評論社. https://gihyo.jp/book/2021/978-4-297-12170-9.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ドキュメントの作成</span>"
    ]
  },
  {
    "objectID": "document.html#footnotes",
    "href": "document.html#footnotes",
    "title": "5  ドキュメントの作成",
    "section": "",
    "text": "コードを記述する箇所。Jupyterではコードセルと呼ばれます。↩︎\nドキュメント全体での制御はフロントマター内で行います。個別のコードブロックに対して記述したオプションが優先されます。実行オプションの詳細はQuarto公式ページのドキュメントに記載されています。↩︎",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ドキュメントの作成</span>"
    ]
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "6  再現性を高めるRパッケージ",
    "section": "",
    "text": "6.1 renvパッケージ",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>再現性を高めるRパッケージ</span>"
    ]
  },
  {
    "objectID": "packages.html#pointblankパッケージ",
    "href": "packages.html#pointblankパッケージ",
    "title": "6  再現性を高めるRパッケージ",
    "section": "6.2 pointblankパッケージ",
    "text": "6.2 pointblankパッケージ",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>再現性を高めるRパッケージ</span>"
    ]
  },
  {
    "objectID": "packages.html#pinsパッケージ",
    "href": "packages.html#pinsパッケージ",
    "title": "6  再現性を高めるRパッケージ",
    "section": "6.3 pinsパッケージ",
    "text": "6.3 pinsパッケージ",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>再現性を高めるRパッケージ</span>"
    ]
  },
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "7  ワークフロー",
    "section": "",
    "text": "targetsパッケージ",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ワークフロー</span>"
    ]
  },
  {
    "objectID": "container.html",
    "href": "container.html",
    "title": "8  コンテナ",
    "section": "",
    "text": "8.1 Docker",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>コンテナ</span>"
    ]
  },
  {
    "objectID": "reference.html",
    "href": "reference.html",
    "title": "参考文献",
    "section": "",
    "text": "松村優哉, 湯谷啓明, 紀ノ定保礼, and 前田和寛. 2021.\nRユーザのためのRStudio〈実践〉入門 :\nTidyverseによるモダンな分析フローの世界. 技術評論社. https://gihyo.jp/book/2021/978-4-297-12170-9.\n\n\n横田紋奈, and 宇賀神みずき. 2022. いちばんやさしいGit &\nGitHubの教本 : 人気講師が教えるバージョン管理&共有入門. 第2版\ned. インプレス. https://ndlsearch.ndl.go.jp/books/R100000002-I032013125.\n\n\n渡辺宙志. 2024. ゼロから学ぶGit/GitHub :\n現代的なソフトウェア開発のために. 講談社. https://ndlsearch.ndl.go.jp/books/R100000002-I033407628.",
    "crumbs": [
      "参考文献"
    ]
  }
]